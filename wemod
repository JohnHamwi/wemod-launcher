#!/usr/bin/env python3

import shutil
import sys
import os
import subprocess
from util import cache, exit_with_message, get_dotnet48, popup_dowload, wine, winetricks, log, popup_execute, pip, popup_options
from setup import main

SCRIPT_PATH=os.path.dirname(os.path.realpath(__file__))
WEMOD_BAT = "C:\\\\windows\\\\system32\\\\start.exe Z:" + "\\\\".join(SCRIPT_PATH.split("/")) + "\\\\wemod.bat"
WINEPREFIX = os.path.join(os.getenv("STEAM_COMPAT_DATA_PATH"), "pfx")
WINETRICKS = os.path.join(SCRIPT_PATH, "winetricks")
INIT_FILE = os.path.join(WINEPREFIX, ".wemod_installer")

def init(proton:str) -> None:
  import PySimpleGUI as sg

  # if wineprefix doesnt exist
  if not os.path.isdir(WINEPREFIX):
    os.makedirs(os.getenv("STEAM_COMPAT_DATA_PATH"), exist_ok=True)
    os.makedirs(WINEPREFIX, exist_ok=True)

  # check if WINEPREFIX is already inited
  
  log("Looking for init file '{}' in '{}'".format(INIT_FILE, WINEPREFIX))
  
  if os.path.exists(INIT_FILE):
    log("Found init file. Continuing launch...")
    return

  log("Init file not found! Attempting to prepare the WINEPREFIX")
  
  prefix_op = popup_options("Prefix Setup", "Would you like to build/modify your prefix or download an already setup one?", [ "build", "download" ])

  proton_dir = proton.split("/")[:-1]
  proton_dir.append("files")
  proton_dir.append("bin")
  proton_dir = "/".join(proton_dir)
  log("Using wine from Proton at path: '{}'".format(proton_dir))

  if prefix_op == "build":
    build_prefix(proton_dir)
  else:
    download_prefix(proton_dir)

def download_prefix(proton_dir:str) -> None:
  from shutil import which
  import PySimpleGUI as sg

<<<<<<< HEAD
  path = os.path.join(SCRIPT_PATH, "bin") + ":" + proton_dir + ":" + os.getenv("PATH")
=======
  path = proton_dir + ":" + os.getenv("PATH")
>>>>>>> 886072f (fix: prefix_download, wemod.bat case, dotnet48 setup 194 ignore)

  file_name = "wemod_prefix.tar.zst"
  link = "https://danimv.top/storage/" + file_name

  # Get Prefix from cache, or download and cache
  prefix_path = cache(file_name, lambda name: popup_dowload("Dowloading Prefix...", link, name))
  
  # First Launch
  if not os.path.exists(WINEPREFIX + "/drive_c"):
    log(WINEPREFIX)
    exit_with_message("First Launch","First Launch Detected: Please run the game once without wemod first.")

  # if os.path.isdir(WINEPREFIX):
  #   log("Found existing prefix..., moving it")
  #   bak_dir = WINEPREFIX + "_bak"

    # if os.path.isdir(bak_dir):
    #   log("Found existing backup dir, removing...")
    #   shutil.rmtree(bak_dir)
    # shutil.move(WINEPREFIX, bak_dir)

  # Unpack prefix
  log("Unpacking prefix...")
  read_binary = "pv -petr" if which("pv") is not None else "cat"
  command = "sh -c \"{} '{}' | zstd -T0 -d -c | tar -xvf - -C '{}'\"".\
    format(read_binary, prefix_path, WINEPREFIX)
  log("Using command '{}'".format(command))

  exit_code = popup_execute("Unpacking prefix...", command)
  if exit_code != 0:
    exit_message = "Prefix unpacking failed with code '{}'".format(exit_code)
    exit_with_message("ERROR", exit_message, exit_code)

  log("Installing vkd3d and dxvk2010...")
  exit_code = winetricks("-q vkd3d dxvk2010", path)

  if exit_code == 0:
    log("Finished dependencies installation. Writing init file...")
    open(INIT_FILE, "a").close()
  else:
    exit_message = "dxvk and vkd3d installation failed with code '{}'".format(exit_code)
    exit_with_message("ERROR", exit_message, exit_code)

def build_prefix(proton_dir:str) -> None:
  import PySimpleGUI as sg
  path = os.path.join(SCRIPT_PATH, "bin") + ":" + proton_dir + ":" + os.getenv("PATH")

  deps = []

  dotnet48_method = popup_options("dotnet48",
    "Would you like to install dotnet48 with winetricks (default) or with wemod-launcher?",
    [ "winetricks", "wemod-launcher" ]
  )

  deps.append("-q sdl cjkfonts vkd3d dxvk2010")
  
  if dotnet48_method == "winetricks":
    deps.append("-q dotnet48")
  
  log("Running dependencies installation. This could take a while...")

  main()

  resp = 0
  dep_i = -1
  while resp == 0 and (len(deps) - 1) > dep_i:
    dep_i = dep_i + 1
    resp = winetricks(deps[dep_i], path)

  if dotnet48_method == "wemod-launcher":
    log("Installing dotnet48...")
    dotnet48 = get_dotnet48()
    wine("winecfg -v win7", path)
    dotnet48_result = wine(dotnet48, path)

    if dotnet48_result != 0 and dotnet48_result != -15 and dotnet48_result != 194:
      exit_with_message("dotnet48 install error", "dotnet48 installation exited with code '{}'".format(dotnet48_result))

  if resp == 0:
    log("Finished dependencies installation. Writing init file...")
    open(INIT_FILE, "a").close()
    return None
  else:
    exit_with_message("ERROR", "Failed dependencies installation with code '{}'. Aborting...".format(resp), resp)


def run(skip_init=False):
  ARGS= " ".join(sys.argv[1:])
  AARGS=ARGS.split(" -- ")
  REAPER_CMD=" -- ".join(AARGS[:-1])
  PROTON_CMD=AARGS[-1].split(" ")
  PROTON=PROTON_CMD[0]

  if not skip_init:
    init(PROTON)

  COMMAND=" ".join(PROTON_CMD[2:])

  WIN_CMD=COMMAND.split(" ")[0].split("/")[-1] + " " + " ".join(COMMAND.split(" ")[1:])

  WIN_PATHS=WIN_CMD.split("/")

  DIR_CONTS = os.listdir(".")

  CORRECT_PATH = list(filter( lambda x: x in DIR_CONTS, WIN_PATHS ))

  if len(CORRECT_PATH) > 0:
    WIN_CMD = WIN_CMD[WIN_CMD.index(CORRECT_PATH[0]):]

<<<<<<< HEAD
  
  WIN_CMD_SPLIT = WIN_CMD.split(".exe")
  WIN_CMD = WIN_CMD_SPLIT[0] + ".exe"
  LAUNCH_OPTIONS=""

  if len(WIN_CMD_SPLIT) > 0:
    LAUNCH_OPTIONS = ".exe".join(WIN_CMD_SPLIT[1:])

  FINAL=REAPER_CMD + " -- " + PROTON + " waitforexitandrun "  + WEMOD_BAT + " \"" + WIN_CMD + "\"" + LAUNCH_OPTIONS
=======
  FINAL=REAPER_CMD + " -- " + PROTON + " waitforexitandrun "  + WEMOD_BAT + " \"" + WIN_CMD + "\""
  # log("ARGS:\n\n" + " ".join(sys.argv) + " \n\n")
>>>>>>> 886072f (fix: prefix_download, wemod.bat case, dotnet48 setup 194 ignore)
  log("Executing:\n\t{}\n".format(FINAL))

  process = subprocess.Popen(FINAL, stdout=subprocess.PIPE, shell=True)
  for line in iter(process.stdout.readline,''):
    if line == None or line == b'':
      break
    log(line.decode("utf8"))

  resp = process.wait()
  log("Exit command with '{}'".format(resp))
  return "EXIT"

log(sys.version)

log("Ensuring Dependencies...")
requirements_txt = os.path.join(SCRIPT_PATH, "requirements.txt")

return_code = pip("install --break-system-packages -r {}".format(requirements_txt))

if return_code != 0:
  log("Failed to install dependencies. pip Exited with code '{}'".format(return_code))
  exit(return_code)

RESP=""
try:
  RESP = run()
except Exception as e:
  RESP="ERR:\n" + str(e)

log(str(RESP) + "\n\n\n")
